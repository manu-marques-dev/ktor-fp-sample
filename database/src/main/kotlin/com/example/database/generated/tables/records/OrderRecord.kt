/*
 * This file is generated by jOOQ.
 */
package com.example.database.generated.tables.records


import com.example.database.generated.tables.Order

import java.time.LocalDateTime
import java.util.UUID

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class OrderRecord() : UpdatableRecordImpl<OrderRecord>(Order.ORDER), Record3<UUID?, Long?, LocalDateTime?> {

    open var id: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    open var number: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    open var date: LocalDateTime?
        set(value): Unit = set(2, value)
        get(): LocalDateTime? = get(2) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<UUID?, Long?, LocalDateTime?> = super.fieldsRow() as Row3<UUID?, Long?, LocalDateTime?>
    override fun valuesRow(): Row3<UUID?, Long?, LocalDateTime?> = super.valuesRow() as Row3<UUID?, Long?, LocalDateTime?>
    override fun field1(): Field<UUID?> = Order.ORDER.ID
    override fun field2(): Field<Long?> = Order.ORDER.NUMBER
    override fun field3(): Field<LocalDateTime?> = Order.ORDER.DATE
    override fun component1(): UUID? = id
    override fun component2(): Long? = number
    override fun component3(): LocalDateTime? = date
    override fun value1(): UUID? = id
    override fun value2(): Long? = number
    override fun value3(): LocalDateTime? = date

    override fun value1(value: UUID?): OrderRecord {
        this.id = value
        return this
    }

    override fun value2(value: Long?): OrderRecord {
        this.number = value
        return this
    }

    override fun value3(value: LocalDateTime?): OrderRecord {
        this.date = value
        return this
    }

    override fun values(value1: UUID?, value2: Long?, value3: LocalDateTime?): OrderRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised OrderRecord
     */
    constructor(id: UUID? = null, number: Long? = null, date: LocalDateTime? = null): this() {
        this.id = id
        this.number = number
        this.date = date
    }

    /**
     * Create a detached, initialised OrderRecord
     */
    constructor(value: com.example.database.generated.tables.pojos.Order?): this() {
        if (value != null) {
            this.id = value.id
            this.number = value.number
            this.date = value.date
        }
    }
}
