/*
 * This file is generated by jOOQ.
 */
package com.example.database.generated.tables.daos


import com.example.database.generated.tables.Order
import com.example.database.generated.tables.records.OrderRecord

import java.time.LocalDateTime
import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class OrderDao(configuration: Configuration?) : DAOImpl<OrderRecord, com.example.database.generated.tables.pojos.Order, UUID>(Order.ORDER, com.example.database.generated.tables.pojos.Order::class.java, configuration) {

    /**
     * Create a new OrderDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: com.example.database.generated.tables.pojos.Order): UUID? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: UUID?, upperInclusive: UUID?): List<com.example.database.generated.tables.pojos.Order> = fetchRange(Order.ORDER.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: UUID): List<com.example.database.generated.tables.pojos.Order> = fetch(Order.ORDER.ID, *values)

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: UUID): com.example.database.generated.tables.pojos.Order? = fetchOne(Order.ORDER.ID, value)

    /**
     * Fetch records that have <code>number BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfNumber(lowerInclusive: Long?, upperInclusive: Long?): List<com.example.database.generated.tables.pojos.Order> = fetchRange(Order.ORDER.NUMBER, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>number IN (values)</code>
     */
    fun fetchByNumber(vararg values: Long): List<com.example.database.generated.tables.pojos.Order> = fetch(Order.ORDER.NUMBER, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>number = value</code>
     */
    fun fetchOneByNumber(value: Long): com.example.database.generated.tables.pojos.Order? = fetchOne(Order.ORDER.NUMBER, value)

    /**
     * Fetch records that have <code>date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfDate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<com.example.database.generated.tables.pojos.Order> = fetchRange(Order.ORDER.DATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>date IN (values)</code>
     */
    fun fetchByDate(vararg values: LocalDateTime): List<com.example.database.generated.tables.pojos.Order> = fetch(Order.ORDER.DATE, *values)
}
