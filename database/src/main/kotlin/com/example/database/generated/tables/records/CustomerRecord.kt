/*
 * This file is generated by jOOQ.
 */
package com.example.database.generated.tables.records


import com.example.database.generated.tables.Customer

import java.util.UUID

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CustomerRecord() : UpdatableRecordImpl<CustomerRecord>(Customer.CUSTOMER), Record4<UUID?, String?, String?, String?> {

    open var id: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    open var firstName: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var lastName: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var email: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<UUID?, String?, String?, String?> = super.fieldsRow() as Row4<UUID?, String?, String?, String?>
    override fun valuesRow(): Row4<UUID?, String?, String?, String?> = super.valuesRow() as Row4<UUID?, String?, String?, String?>
    override fun field1(): Field<UUID?> = Customer.CUSTOMER.ID
    override fun field2(): Field<String?> = Customer.CUSTOMER.FIRST_NAME
    override fun field3(): Field<String?> = Customer.CUSTOMER.LAST_NAME
    override fun field4(): Field<String?> = Customer.CUSTOMER.EMAIL
    override fun component1(): UUID? = id
    override fun component2(): String? = firstName
    override fun component3(): String? = lastName
    override fun component4(): String? = email
    override fun value1(): UUID? = id
    override fun value2(): String? = firstName
    override fun value3(): String? = lastName
    override fun value4(): String? = email

    override fun value1(value: UUID?): CustomerRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): CustomerRecord {
        this.firstName = value
        return this
    }

    override fun value3(value: String?): CustomerRecord {
        this.lastName = value
        return this
    }

    override fun value4(value: String?): CustomerRecord {
        this.email = value
        return this
    }

    override fun values(value1: UUID?, value2: String?, value3: String?, value4: String?): CustomerRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised CustomerRecord
     */
    constructor(id: UUID? = null, firstName: String? = null, lastName: String? = null, email: String? = null): this() {
        this.id = id
        this.firstName = firstName
        this.lastName = lastName
        this.email = email
    }

    /**
     * Create a detached, initialised CustomerRecord
     */
    constructor(value: com.example.database.generated.tables.pojos.Customer?): this() {
        if (value != null) {
            this.id = value.id
            this.firstName = value.firstName
            this.lastName = value.lastName
            this.email = value.email
        }
    }
}
