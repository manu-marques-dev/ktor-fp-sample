/*
 * This file is generated by jOOQ.
 */
package com.example.database.generated.tables


import com.example.database.generated.Public
import com.example.database.generated.enums.ProductType
import com.example.database.generated.indexes.PRODUCT_PRODUCT_TYPE_IDX
import com.example.database.generated.keys.PRODUCT_NAME_KEY
import com.example.database.generated.keys.PRODUCT_PKEY
import com.example.database.generated.tables.records.ProductRecord

import java.math.BigDecimal
import java.util.UUID
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row5
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Product(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ProductRecord>?,
    aliased: Table<ProductRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ProductRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.product</code>
         */
        val PRODUCT: Product = Product()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ProductRecord> = ProductRecord::class.java

    /**
     * The column <code>public.product.id</code>.
     */
    val ID: TableField<ProductRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.product.product_type</code>.
     */
    val PRODUCT_TYPE: TableField<ProductRecord, ProductType?> = createField(DSL.name("product_type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.example.database.generated.enums.ProductType::class.java), this, "")

    /**
     * The column <code>public.product.name</code>.
     */
    val NAME: TableField<ProductRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.product.description</code>.
     */
    val DESCRIPTION: TableField<ProductRecord, String?> = createField(DSL.name("description"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.product.price</code>.
     */
    val PRICE: TableField<ProductRecord, BigDecimal?> = createField(DSL.name("price"), SQLDataType.NUMERIC(12, 2).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<ProductRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ProductRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.product</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.product</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.product</code> table reference
     */
    constructor(): this(DSL.name("product"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ProductRecord>): this(Internal.createPathAlias(child, key), child, key, PRODUCT, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(PRODUCT_PRODUCT_TYPE_IDX)
    override fun getPrimaryKey(): UniqueKey<ProductRecord> = PRODUCT_PKEY
    override fun getUniqueKeys(): List<UniqueKey<ProductRecord>> = listOf(PRODUCT_NAME_KEY)
    override fun `as`(alias: String): Product = Product(DSL.name(alias), this)
    override fun `as`(alias: Name): Product = Product(alias, this)
    override fun `as`(alias: Table<*>): Product = Product(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Product = Product(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Product = Product(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Product = Product(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row5<UUID?, ProductType?, String?, String?, BigDecimal?> = super.fieldsRow() as Row5<UUID?, ProductType?, String?, String?, BigDecimal?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (UUID?, ProductType?, String?, String?, BigDecimal?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (UUID?, ProductType?, String?, String?, BigDecimal?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
