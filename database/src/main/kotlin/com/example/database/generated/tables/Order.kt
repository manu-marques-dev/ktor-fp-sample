/*
 * This file is generated by jOOQ.
 */
package com.example.database.generated.tables


import com.example.database.generated.Public
import com.example.database.generated.keys.ORDER_NUMBER_KEY
import com.example.database.generated.keys.ORDER_PKEY
import com.example.database.generated.tables.records.OrderRecord

import java.time.LocalDateTime
import java.util.UUID
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Order(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, OrderRecord>?,
    aliased: Table<OrderRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<OrderRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.ORDER</code>
         */
        val ORDER: Order = Order()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<OrderRecord> = OrderRecord::class.java

    /**
     * The column <code>public.ORDER.id</code>.
     */
    val ID: TableField<OrderRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.ORDER.number</code>.
     */
    val NUMBER: TableField<OrderRecord, Long?> = createField(DSL.name("number"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("nextval('\"ORDER_number_seq\"'::regclass)", SQLDataType.BIGINT)), this, "")

    /**
     * The column <code>public.ORDER.date</code>.
     */
    val DATE: TableField<OrderRecord, LocalDateTime?> = createField(DSL.name("date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<OrderRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<OrderRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.ORDER</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.ORDER</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.ORDER</code> table reference
     */
    constructor(): this(DSL.name("ORDER"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, OrderRecord>): this(Internal.createPathAlias(child, key), child, key, ORDER, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<OrderRecord> = ORDER_PKEY
    override fun getUniqueKeys(): List<UniqueKey<OrderRecord>> = listOf(ORDER_NUMBER_KEY)
    override fun `as`(alias: String): Order = Order(DSL.name(alias), this)
    override fun `as`(alias: Name): Order = Order(alias, this)
    override fun `as`(alias: Table<*>): Order = Order(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Order = Order(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Order = Order(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Order = Order(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<UUID?, Long?, LocalDateTime?> = super.fieldsRow() as Row3<UUID?, Long?, LocalDateTime?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (UUID?, Long?, LocalDateTime?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (UUID?, Long?, LocalDateTime?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
