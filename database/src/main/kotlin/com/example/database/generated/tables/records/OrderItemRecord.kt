/*
 * This file is generated by jOOQ.
 */
package com.example.database.generated.tables.records


import com.example.database.generated.tables.OrderItem

import java.math.BigDecimal
import java.util.UUID

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class OrderItemRecord() : UpdatableRecordImpl<OrderItemRecord>(OrderItem.ORDER_ITEM), Record5<UUID?, UUID?, UUID?, BigDecimal?, BigDecimal?> {

    open var id: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    open var orderId: UUID?
        set(value): Unit = set(1, value)
        get(): UUID? = get(1) as UUID?

    open var productId: UUID?
        set(value): Unit = set(2, value)
        get(): UUID? = get(2) as UUID?

    open var amount: BigDecimal?
        set(value): Unit = set(3, value)
        get(): BigDecimal? = get(3) as BigDecimal?

    open var price: BigDecimal?
        set(value): Unit = set(4, value)
        get(): BigDecimal? = get(4) as BigDecimal?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<UUID?, UUID?, UUID?, BigDecimal?, BigDecimal?> = super.fieldsRow() as Row5<UUID?, UUID?, UUID?, BigDecimal?, BigDecimal?>
    override fun valuesRow(): Row5<UUID?, UUID?, UUID?, BigDecimal?, BigDecimal?> = super.valuesRow() as Row5<UUID?, UUID?, UUID?, BigDecimal?, BigDecimal?>
    override fun field1(): Field<UUID?> = OrderItem.ORDER_ITEM.ID
    override fun field2(): Field<UUID?> = OrderItem.ORDER_ITEM.ORDER_ID
    override fun field3(): Field<UUID?> = OrderItem.ORDER_ITEM.PRODUCT_ID
    override fun field4(): Field<BigDecimal?> = OrderItem.ORDER_ITEM.AMOUNT
    override fun field5(): Field<BigDecimal?> = OrderItem.ORDER_ITEM.PRICE
    override fun component1(): UUID? = id
    override fun component2(): UUID? = orderId
    override fun component3(): UUID? = productId
    override fun component4(): BigDecimal? = amount
    override fun component5(): BigDecimal? = price
    override fun value1(): UUID? = id
    override fun value2(): UUID? = orderId
    override fun value3(): UUID? = productId
    override fun value4(): BigDecimal? = amount
    override fun value5(): BigDecimal? = price

    override fun value1(value: UUID?): OrderItemRecord {
        this.id = value
        return this
    }

    override fun value2(value: UUID?): OrderItemRecord {
        this.orderId = value
        return this
    }

    override fun value3(value: UUID?): OrderItemRecord {
        this.productId = value
        return this
    }

    override fun value4(value: BigDecimal?): OrderItemRecord {
        this.amount = value
        return this
    }

    override fun value5(value: BigDecimal?): OrderItemRecord {
        this.price = value
        return this
    }

    override fun values(value1: UUID?, value2: UUID?, value3: UUID?, value4: BigDecimal?, value5: BigDecimal?): OrderItemRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised OrderItemRecord
     */
    constructor(id: UUID? = null, orderId: UUID? = null, productId: UUID? = null, amount: BigDecimal? = null, price: BigDecimal? = null): this() {
        this.id = id
        this.orderId = orderId
        this.productId = productId
        this.amount = amount
        this.price = price
    }

    /**
     * Create a detached, initialised OrderItemRecord
     */
    constructor(value: com.example.database.generated.tables.pojos.OrderItem?): this() {
        if (value != null) {
            this.id = value.id
            this.orderId = value.orderId
            this.productId = value.productId
            this.amount = value.amount
            this.price = value.price
        }
    }
}
