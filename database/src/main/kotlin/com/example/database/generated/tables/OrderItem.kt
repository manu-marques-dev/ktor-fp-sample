/*
 * This file is generated by jOOQ.
 */
package com.example.database.generated.tables


import com.example.database.generated.Public
import com.example.database.generated.keys.ORDER_ITEM_ORDER_ID_PRODUCT_ID_KEY
import com.example.database.generated.keys.ORDER_ITEM_PKEY
import com.example.database.generated.keys.ORDER_ITEM__ORDER_ITEM_ORDER_ID_FKEY
import com.example.database.generated.keys.ORDER_ITEM__ORDER_ITEM_PRODUCT_ID_FKEY
import com.example.database.generated.tables.records.OrderItemRecord

import java.math.BigDecimal
import java.util.UUID
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row5
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class OrderItem(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, OrderItemRecord>?,
    aliased: Table<OrderItemRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<OrderItemRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.order_item</code>
         */
        val ORDER_ITEM: OrderItem = OrderItem()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<OrderItemRecord> = OrderItemRecord::class.java

    /**
     * The column <code>public.order_item.id</code>.
     */
    val ID: TableField<OrderItemRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.order_item.order_id</code>.
     */
    val ORDER_ID: TableField<OrderItemRecord, UUID?> = createField(DSL.name("order_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>public.order_item.product_id</code>.
     */
    val PRODUCT_ID: TableField<OrderItemRecord, UUID?> = createField(DSL.name("product_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>public.order_item.amount</code>.
     */
    val AMOUNT: TableField<OrderItemRecord, BigDecimal?> = createField(DSL.name("amount"), SQLDataType.NUMERIC.nullable(false), this, "")

    /**
     * The column <code>public.order_item.price</code>.
     */
    val PRICE: TableField<OrderItemRecord, BigDecimal?> = createField(DSL.name("price"), SQLDataType.NUMERIC(12, 2).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<OrderItemRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<OrderItemRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.order_item</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.order_item</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.order_item</code> table reference
     */
    constructor(): this(DSL.name("order_item"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, OrderItemRecord>): this(Internal.createPathAlias(child, key), child, key, ORDER_ITEM, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<OrderItemRecord> = ORDER_ITEM_PKEY
    override fun getUniqueKeys(): List<UniqueKey<OrderItemRecord>> = listOf(ORDER_ITEM_ORDER_ID_PRODUCT_ID_KEY)
    override fun getReferences(): List<ForeignKey<OrderItemRecord, *>> = listOf(ORDER_ITEM__ORDER_ITEM_ORDER_ID_FKEY, ORDER_ITEM__ORDER_ITEM_PRODUCT_ID_FKEY)

    private lateinit var _order: Order
    private lateinit var _product: Product

    /**
     * Get the implicit join path to the <code>public.ORDER</code> table.
     */
    fun order(): Order {
        if (!this::_order.isInitialized)
            _order = Order(this, ORDER_ITEM__ORDER_ITEM_ORDER_ID_FKEY)

        return _order;
    }

    val order: Order
        get(): Order = order()

    /**
     * Get the implicit join path to the <code>public.product</code> table.
     */
    fun product(): Product {
        if (!this::_product.isInitialized)
            _product = Product(this, ORDER_ITEM__ORDER_ITEM_PRODUCT_ID_FKEY)

        return _product;
    }

    val product: Product
        get(): Product = product()
    override fun `as`(alias: String): OrderItem = OrderItem(DSL.name(alias), this)
    override fun `as`(alias: Name): OrderItem = OrderItem(alias, this)
    override fun `as`(alias: Table<*>): OrderItem = OrderItem(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): OrderItem = OrderItem(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): OrderItem = OrderItem(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): OrderItem = OrderItem(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row5<UUID?, UUID?, UUID?, BigDecimal?, BigDecimal?> = super.fieldsRow() as Row5<UUID?, UUID?, UUID?, BigDecimal?, BigDecimal?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (UUID?, UUID?, UUID?, BigDecimal?, BigDecimal?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (UUID?, UUID?, UUID?, BigDecimal?, BigDecimal?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
