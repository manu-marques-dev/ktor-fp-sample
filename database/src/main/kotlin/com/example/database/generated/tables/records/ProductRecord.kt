/*
 * This file is generated by jOOQ.
 */
package com.example.database.generated.tables.records


import com.example.database.generated.enums.ProductType
import com.example.database.generated.tables.Product

import java.math.BigDecimal
import java.util.UUID

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ProductRecord() : UpdatableRecordImpl<ProductRecord>(Product.PRODUCT), Record5<UUID?, ProductType?, String?, String?, BigDecimal?> {

    open var id: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    open var productType: ProductType?
        set(value): Unit = set(1, value)
        get(): ProductType? = get(1) as ProductType?

    open var name: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var description: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var price: BigDecimal?
        set(value): Unit = set(4, value)
        get(): BigDecimal? = get(4) as BigDecimal?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<UUID?, ProductType?, String?, String?, BigDecimal?> = super.fieldsRow() as Row5<UUID?, ProductType?, String?, String?, BigDecimal?>
    override fun valuesRow(): Row5<UUID?, ProductType?, String?, String?, BigDecimal?> = super.valuesRow() as Row5<UUID?, ProductType?, String?, String?, BigDecimal?>
    override fun field1(): Field<UUID?> = Product.PRODUCT.ID
    override fun field2(): Field<ProductType?> = Product.PRODUCT.PRODUCT_TYPE
    override fun field3(): Field<String?> = Product.PRODUCT.NAME
    override fun field4(): Field<String?> = Product.PRODUCT.DESCRIPTION
    override fun field5(): Field<BigDecimal?> = Product.PRODUCT.PRICE
    override fun component1(): UUID? = id
    override fun component2(): ProductType? = productType
    override fun component3(): String? = name
    override fun component4(): String? = description
    override fun component5(): BigDecimal? = price
    override fun value1(): UUID? = id
    override fun value2(): ProductType? = productType
    override fun value3(): String? = name
    override fun value4(): String? = description
    override fun value5(): BigDecimal? = price

    override fun value1(value: UUID?): ProductRecord {
        this.id = value
        return this
    }

    override fun value2(value: ProductType?): ProductRecord {
        this.productType = value
        return this
    }

    override fun value3(value: String?): ProductRecord {
        this.name = value
        return this
    }

    override fun value4(value: String?): ProductRecord {
        this.description = value
        return this
    }

    override fun value5(value: BigDecimal?): ProductRecord {
        this.price = value
        return this
    }

    override fun values(value1: UUID?, value2: ProductType?, value3: String?, value4: String?, value5: BigDecimal?): ProductRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised ProductRecord
     */
    constructor(id: UUID? = null, productType: ProductType? = null, name: String? = null, description: String? = null, price: BigDecimal? = null): this() {
        this.id = id
        this.productType = productType
        this.name = name
        this.description = description
        this.price = price
    }

    /**
     * Create a detached, initialised ProductRecord
     */
    constructor(value: com.example.database.generated.tables.pojos.Product?): this() {
        if (value != null) {
            this.id = value.id
            this.productType = value.productType
            this.name = value.name
            this.description = value.description
            this.price = value.price
        }
    }
}
