/*
 * This file is generated by jOOQ.
 */
package com.example.database.generated.tables.daos


import com.example.database.generated.tables.OrderItem
import com.example.database.generated.tables.records.OrderItemRecord

import java.math.BigDecimal
import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class OrderItemDao(configuration: Configuration?) : DAOImpl<OrderItemRecord, com.example.database.generated.tables.pojos.OrderItem, UUID>(OrderItem.ORDER_ITEM, com.example.database.generated.tables.pojos.OrderItem::class.java, configuration) {

    /**
     * Create a new OrderItemDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: com.example.database.generated.tables.pojos.OrderItem): UUID? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: UUID?, upperInclusive: UUID?): List<com.example.database.generated.tables.pojos.OrderItem> = fetchRange(OrderItem.ORDER_ITEM.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: UUID): List<com.example.database.generated.tables.pojos.OrderItem> = fetch(OrderItem.ORDER_ITEM.ID, *values)

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: UUID): com.example.database.generated.tables.pojos.OrderItem? = fetchOne(OrderItem.ORDER_ITEM.ID, value)

    /**
     * Fetch records that have <code>order_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfOrderId(lowerInclusive: UUID?, upperInclusive: UUID?): List<com.example.database.generated.tables.pojos.OrderItem> = fetchRange(OrderItem.ORDER_ITEM.ORDER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>order_id IN (values)</code>
     */
    fun fetchByOrderId(vararg values: UUID): List<com.example.database.generated.tables.pojos.OrderItem> = fetch(OrderItem.ORDER_ITEM.ORDER_ID, *values)

    /**
     * Fetch records that have <code>product_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfProductId(lowerInclusive: UUID?, upperInclusive: UUID?): List<com.example.database.generated.tables.pojos.OrderItem> = fetchRange(OrderItem.ORDER_ITEM.PRODUCT_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>product_id IN (values)</code>
     */
    fun fetchByProductId(vararg values: UUID): List<com.example.database.generated.tables.pojos.OrderItem> = fetch(OrderItem.ORDER_ITEM.PRODUCT_ID, *values)

    /**
     * Fetch records that have <code>amount BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfAmount(lowerInclusive: BigDecimal?, upperInclusive: BigDecimal?): List<com.example.database.generated.tables.pojos.OrderItem> = fetchRange(OrderItem.ORDER_ITEM.AMOUNT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>amount IN (values)</code>
     */
    fun fetchByAmount(vararg values: BigDecimal): List<com.example.database.generated.tables.pojos.OrderItem> = fetch(OrderItem.ORDER_ITEM.AMOUNT, *values)

    /**
     * Fetch records that have <code>price BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfPrice(lowerInclusive: BigDecimal?, upperInclusive: BigDecimal?): List<com.example.database.generated.tables.pojos.OrderItem> = fetchRange(OrderItem.ORDER_ITEM.PRICE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>price IN (values)</code>
     */
    fun fetchByPrice(vararg values: BigDecimal): List<com.example.database.generated.tables.pojos.OrderItem> = fetch(OrderItem.ORDER_ITEM.PRICE, *values)
}
