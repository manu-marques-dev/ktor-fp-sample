/*
 * This file is generated by jOOQ.
 */
package com.example.database.generated.tables.daos


import com.example.database.generated.enums.ProductType
import com.example.database.generated.tables.Product
import com.example.database.generated.tables.records.ProductRecord

import java.math.BigDecimal
import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ProductDao(configuration: Configuration?) : DAOImpl<ProductRecord, com.example.database.generated.tables.pojos.Product, UUID>(Product.PRODUCT, com.example.database.generated.tables.pojos.Product::class.java, configuration) {

    /**
     * Create a new ProductDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: com.example.database.generated.tables.pojos.Product): UUID? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: UUID?, upperInclusive: UUID?): List<com.example.database.generated.tables.pojos.Product> = fetchRange(Product.PRODUCT.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: UUID): List<com.example.database.generated.tables.pojos.Product> = fetch(Product.PRODUCT.ID, *values)

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: UUID): com.example.database.generated.tables.pojos.Product? = fetchOne(Product.PRODUCT.ID, value)

    /**
     * Fetch records that have <code>product_type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfProductType(lowerInclusive: ProductType?, upperInclusive: ProductType?): List<com.example.database.generated.tables.pojos.Product> = fetchRange(Product.PRODUCT.PRODUCT_TYPE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>product_type IN (values)</code>
     */
    fun fetchByProductType(vararg values: ProductType): List<com.example.database.generated.tables.pojos.Product> = fetch(Product.PRODUCT.PRODUCT_TYPE, *values)

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfName(lowerInclusive: String?, upperInclusive: String?): List<com.example.database.generated.tables.pojos.Product> = fetchRange(Product.PRODUCT.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    fun fetchByName(vararg values: String): List<com.example.database.generated.tables.pojos.Product> = fetch(Product.PRODUCT.NAME, *values)

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    fun fetchOneByName(value: String): com.example.database.generated.tables.pojos.Product? = fetchOne(Product.PRODUCT.NAME, value)

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfDescription(lowerInclusive: String?, upperInclusive: String?): List<com.example.database.generated.tables.pojos.Product> = fetchRange(Product.PRODUCT.DESCRIPTION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    fun fetchByDescription(vararg values: String): List<com.example.database.generated.tables.pojos.Product> = fetch(Product.PRODUCT.DESCRIPTION, *values)

    /**
     * Fetch records that have <code>price BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfPrice(lowerInclusive: BigDecimal?, upperInclusive: BigDecimal?): List<com.example.database.generated.tables.pojos.Product> = fetchRange(Product.PRODUCT.PRICE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>price IN (values)</code>
     */
    fun fetchByPrice(vararg values: BigDecimal): List<com.example.database.generated.tables.pojos.Product> = fetch(Product.PRODUCT.PRICE, *values)
}
