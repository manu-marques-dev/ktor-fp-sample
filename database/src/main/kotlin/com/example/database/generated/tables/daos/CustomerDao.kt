/*
 * This file is generated by jOOQ.
 */
package com.example.database.generated.tables.daos


import com.example.database.generated.tables.Customer
import com.example.database.generated.tables.records.CustomerRecord

import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CustomerDao(configuration: Configuration?) : DAOImpl<CustomerRecord, com.example.database.generated.tables.pojos.Customer, UUID>(Customer.CUSTOMER, com.example.database.generated.tables.pojos.Customer::class.java, configuration) {

    /**
     * Create a new CustomerDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: com.example.database.generated.tables.pojos.Customer): UUID? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: UUID?, upperInclusive: UUID?): List<com.example.database.generated.tables.pojos.Customer> = fetchRange(Customer.CUSTOMER.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: UUID): List<com.example.database.generated.tables.pojos.Customer> = fetch(Customer.CUSTOMER.ID, *values)

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: UUID): com.example.database.generated.tables.pojos.Customer? = fetchOne(Customer.CUSTOMER.ID, value)

    /**
     * Fetch records that have <code>first_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFirstName(lowerInclusive: String?, upperInclusive: String?): List<com.example.database.generated.tables.pojos.Customer> = fetchRange(Customer.CUSTOMER.FIRST_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>first_name IN (values)</code>
     */
    fun fetchByFirstName(vararg values: String): List<com.example.database.generated.tables.pojos.Customer> = fetch(Customer.CUSTOMER.FIRST_NAME, *values)

    /**
     * Fetch records that have <code>last_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLastName(lowerInclusive: String?, upperInclusive: String?): List<com.example.database.generated.tables.pojos.Customer> = fetchRange(Customer.CUSTOMER.LAST_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_name IN (values)</code>
     */
    fun fetchByLastName(vararg values: String): List<com.example.database.generated.tables.pojos.Customer> = fetch(Customer.CUSTOMER.LAST_NAME, *values)

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfEmail(lowerInclusive: String?, upperInclusive: String?): List<com.example.database.generated.tables.pojos.Customer> = fetchRange(Customer.CUSTOMER.EMAIL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    fun fetchByEmail(vararg values: String): List<com.example.database.generated.tables.pojos.Customer> = fetch(Customer.CUSTOMER.EMAIL, *values)
}
